package collections.queDeque;

/**
 * Created by ddimmxxgmail.com on 3/10/17.
 */
public interface Dequeue <E> {


    /**Добавляет элемент в конец очереди,
     * @return true  - элемент удачно добавлен
     *         false - элемент не добавлен*/
    boolean offer(E element);

    /**Возвращает без удаления эл емент из начала очереди
     * @return int element - возврщает значение элемента
     *             null    - если очередь пуста, возвращается null*/
    E peek();

    /**Возвращает c удалением элемент из начала очереди
     * @return int element - возврщает значение элемента
     *             null    - если очередь пуста, возвращается null*/
    E poll();



    /**Добавляет элемент в начало очереди*/
    void addFirst(E element);

    /**Добавляет элемент в конец очереди*/
    void addLast(E element);

    /**Добавляет элемент в начало очереди
     * @return true  - элемент удачно добавлен
     *         false - элемент не добавлен*/
    boolean offerFirst(E element);

    /**Добавляет элемент в конец очереди
     * @return true  - элемент удачно добавлен
     *         false - элемент не добавлен*/
    boolean offerLast(E element);

    /**Возвращает без удаления элемент из начала очереди
     * @return int element - возврщает значение элемента
     *             null    - если очередь пуста, возвращается null*/
    E peekFirst();

    /**Возвращает без удаления элемент из конца очереди
     * @return int element - возврщает значение элемента
     *             null    - если очередь пуста, возвращается null*/
    E peekLast();

    /**Возвращает c удалением элемент из начала очереди
     * @return int element - возврщает значение элемента
     *             null    - если очередь пуста, возвращается null*/
    E pollFirst();

    /**Возвращает c удалением элемент из конца очереди
     * @return int element - возврщает значение элемента
     *             null    - если очередь пуста, возвращается null*/
    E pollLast();







}
